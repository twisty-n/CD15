+/+
  This is a test program that should be lexically and syntactically valid. If you find something incorrect please let me know
This program attempts a full coverage of the language and (to my knowledge) should cover all aspects of cd15 v1.3.1
EDIT: Fixed narrvar with intlit index
EDIT 13/9: Fixed a bug with right-associativity and have updated program and tree to test this accordingly
+/+
program cd15
        arrays myArrs[5], intArrs[0]


        proc shortMessage
                printline "Hello";
        end proc shortMessage

        proc myProc
                var retMsg, plist[]
                val myMsg, pidlist

                local msgCount, declist[3];

                plist = 3 div (retMsg == 4 and 5 != 1 or not 3 < 1 xor 1>= 1);
                plist -= 1 * 5 / 3;
                plist *= 5 div 2;
                plist /= 10 - 2 + 2 - 5 + 5;

                if myMsg.length > 0 then
                        msgCount+= 1;
                        printline myMsg;
                        input retMsg, retMsg, pidlist[3 + 5];
                        print retMsg, prlist;
                elsif myMsg.length <= 0 then
                        printline "I'm Tiny!", myMsg;
                        msgCount += 1;
                else
                        print "This statement can not be reached!";
                        loop myLoop
                                pidlist = pidlist + 1;
                                if(pidlist != 10) == 1 then
                                        exit myLoop when msgCount < 5;
                                end if
                        end loop myLoop
                end if
        end proc myProc

        local myId, myId2, myProc;

        call shortMessage with 0;

        if myId >= myId2[1] then
                call myProc with 5.32 - myId + 3/2;
        else
                call myProc;
        end if
end program cd15

